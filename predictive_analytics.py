# -*- coding: utf-8 -*-
"""Predictive_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-U_Jcj7IZez6P-gA59_XZ-MDehPq2c2Q

# Proyek Pertama (Predictive Analytics):
- **Nama:** Ch Angga Marceclio
- **Email:** chmarcel0603@gmail.com
- **ID Dicoding:** MC315D5Y1131

## Import Library
"""

# Standard Libraries
import re
import string
from io import StringIO
import csv
import pickle
import joblib
import requests

# Utilities
from tqdm import tqdm
from google.colab import drive

# Data Processing
import numpy as np
import pandas as pd

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# Machine Learning
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline

# Deep Learning
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import (
    Embedding, LSTM, GRU, Conv1D, GlobalMaxPooling1D, Dense, Dropout,
    BatchNormalization
)
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.regularizers import l2
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping

from google.colab import drive
import pandas as pd

drive.mount('/content/drive')

# Baca dataset
df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/crop_recommendation.csv")
df

"""## Exploratory Data Analysis"""

# Menampilkan lima data teratas.
df.head()

df.describe()

# Menampilkan info dataset
df.info()

df['label'].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt

features = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']
for col in features:
    plt.figure(figsize=(6,4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi {col}')
    plt.show()

plt.figure(figsize=(10,6))
sns.heatmap(df[features].corr(), annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Fitur')
plt.show()

"""## Text Preprocessing"""

print(df.isnull().sum())

print(df.duplicated().sum())

"""## Modeling"""

features = df[['N', 'P','K','temperature', 'humidity', 'ph', 'rainfall']]
target = df['label']

# Menginisialisasi daftar kosong untuk menambahkan semua nama model dan nama yang sesuai
acc = []
model = []

# Membagi menjadi data train dan data test
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(features,target,test_size = 0.2,random_state =2)

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score

RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(x_train,y_train)

predicted_values = RF.predict(x_test)

x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('RF')
print("Random Forest Accuracy is: ", x)

print(classification_report(y_test,predicted_values))

score = cross_val_score(RF,features,target,cv=5)
print('Cross validation score: ',score)

from sklearn.tree import DecisionTreeClassifier
DT = DecisionTreeClassifier(criterion="entropy",random_state=2,max_depth=5)

DT.fit(x_train,y_train)

predicted_values = DT.predict(x_test)
x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('Decision Tree')
print("Decision Tree's Accuracy is: ", x*100)

print(classification_report(y_test,predicted_values, zero_division=0))

# Cross validation score (Logistic Regression)
score = cross_val_score(DT,features,target,cv=5)
score

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()

knn.fit(x_train,y_train)

predicted_values = knn.predict(x_test)

x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('K Nearest Neighbours')
print("KNN Accuracy is: ", x)

print(classification_report(y_test,predicted_values))

# Cross validation score (Logistic Regression)
score = cross_val_score(knn,features,target,cv=5)
score

plt.figure(figsize=(14, 7), dpi=100, facecolor='white')
plt.title('Perbandingan Akurasi', fontsize=18, fontweight='bold')
plt.xlabel('Akurasi', fontsize=14)
plt.ylabel('Algoritma ML', fontsize=14)
sns.barplot(x=acc, y=model, palette='viridis')

# Menyimpan plot
plt.tight_layout()
plt.savefig('perbandingan_akurasi.png', dpi=300, bbox_inches='tight')
plt.show()

data = np.array([[104,18, 30, 23.603016, 60.3, 6.7, 140.91]])
prediction = RF.predict(data)
print(prediction)