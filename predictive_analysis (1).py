# -*- coding: utf-8 -*-
"""Predictive_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-U_Jcj7IZez6P-gA59_XZ-MDehPq2c2Q

# Proyek Pertama (Predictive Analytics):
- **Nama:** Ch Angga Marceclio
- **Email:** chmarcel0603@gmail.com
- **ID Dicoding:** MC315D5Y1131

## Deskripsi Proyek

Proyek ini bertujuan mengembangkan sistem untuk membantu petani memilih jenis tanaman paling sesuai berdasarkan kondisi tanah dan lingkungan. Sistem ini akan menggunakan algoritma Machine Learning (seperti Random Forest, Decision Tree, dan K-Nearest Neighbors) untuk menganalisis parameter agrikultur, seperti pH tanah, kadar nutrisi, suhu, dan curah hujan. Tujuannya adalah meningkatkan akurasi pemilihan tanaman, mengoptimalkan hasil panen, dan mengurangi risiko kegagalan, sehingga mendukung pertanian presisi yang lebih efisien dan berkelanjutan.

## **1. Import Library**
"""

# Standard Libraries
import re
import string
from io import StringIO
import csv
import pickle
import joblib
import requests

# Utilities
from tqdm import tqdm
from google.colab import drive

# Data Processing
import numpy as np
import pandas as pd

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# Machine Learning
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline

# Deep Learning
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import (
    Embedding, LSTM, GRU, Conv1D, GlobalMaxPooling1D, Dense, Dropout,
    BatchNormalization
)
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.regularizers import l2
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping

"""## **2. Data Understanding**

Data Understanding merupakan proses memahami informasi dalam data dan menentukan kualitas dari data tersebut.

### 2.1 Data Loading
"""

from google.colab import drive
import pandas as pd

drive.mount('/content/drive')

# Baca dataset
df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/crop_recommendation.csv")
df

"""Proses ini melibatkan pemuatan dataset crop_recommendation.csv yang berisi 2200 baris dan 8 kolom. Kolom-kolom tersebut mencakup fitur numerik seperti kadar Nitrogen, Fosfor, Kalium, suhu, kelembapan, pH tanah, curah hujan, serta kolom target label yang berisi jenis tanaman. Tahap ini juga melibatkan proses mengimpor atau membaca data dari sumber eksternal ke dalam lingkungan kerja (dalam kasus ini, Google Colab)

### 2.2 Exploratory Data Analysis

Exploratory Data Analysis (EDA) merupakan proses awal analisis data untuk memahami karakteristik, struktur, pola, dan potensi anomali dalam dataset. Tujuannya adalah mendapatkan wawasan mendalam tentang data melalui statistik deskriptif dan visualisasi (misalnya, histogram, box plot, scatter plot) sebelum membangun model Machine Learning. EDA membantu mengidentifikasi hubungan antar variabel, mendeteksi outlier, dan memastikan kualitas data, yang semuanya krusial untuk keputusan pemodelan yang tepat.
"""

# Menampilkan lima data teratas.
df.head()

df.describe()

"""Menampilkan statistik deskriptif untuk setiap kolom numerik dalam dataset. Ini mencakup informasi seperti:

- count: Jumlah entri non-null (2200 untuk semua kolom, menunjukkan tidak ada missing value).
- mean: Rata-rata nilai.
- std: Standar deviasi, mengukur sebaran data.
- min: Nilai minimum.
- 25%, 50%, 75%: Kuartil pertama, median (kuartil kedua), dan kuartil ketiga, yang menunjukkan distribusi data.
max: Nilai maksimum.

Statistik ini memberikan gambaran ringkas tentang distribusi dan rentang nilai dari setiap fitur agrikultur (N, P, K, temperature, humidity, pH, rainfall) dalam dataset.
"""

# Menampilkan info dataset
df.info()

df['label'].value_counts()

"""Dataset ini memiliki distribusi kelas yang seimbang (balanced dataset). Setiap jenis tanaman (label) memiliki 100 sampel, sehingga total ada 22 jenis tanaman dengan 2200 sampel keseluruhan. Ini menunjukkan bahwa tidak ada bias terhadap jenis tanaman tertentu dalam dataset, yang merupakan kondisi ideal untuk pelatihan model klasifikasi."""

import seaborn as sns
import matplotlib.pyplot as plt

features = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']
for col in features:
    plt.figure(figsize=(6,4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi {col}')
    plt.show()

"""Pada bagian diatas digunakan untuk memvisualisasikan distribusi setiap fitur numerik (N, P, K, temperature, humidity, ph, rainfall) dalam dataset. Setiap histogram menampilkan frekuensi atau densitas nilai-nilai fitur, membantu mengidentifikasi pola seperti bentuk distribusi (normal, miring), rentang nilai, dan keberadaan outlier. Ini adalah bagian penting dari Eksplorasi Data (EDA) untuk memahami karakteristik individual dari setiap variabel."""

plt.figure(figsize=(10,6))
sns.heatmap(df[features].corr(), annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Fitur')
plt.show()

"""Gambar diatas adalah heatmap korelasi antar fitur, yang memvisualisasikan kekuatan dan arah hubungan linear antara setiap pasang variabel numerik dalam dataset, membantu mengidentifikasi fitur yang saling bergantung.

### 2.3 Exploratory Data Analysis - Menangani Missing Value dan Redudency Data
"""

print(df.isnull().sum())

"""Tidak ada nilai yang hilang (missing values) dalam dataset, artinya data lengkap dan bersih."""

print(df.duplicated().sum())

"""Tidak ada baris duplikat dalam dataset, menunjukkan data unik dan tidak ada entri ganda.

## **3. Data Preparation**

Data Preparation merupakan tahap untuk mempersiapkan data sebelum masuk ke tahap pembuatan model Machine Learning.
"""

features = df[['N', 'P','K','temperature', 'humidity', 'ph', 'rainfall']]
target = df['label']

"""Melakukan pemisahan fitur dan target dari dataset. features menyimpan kolom-kolom input (N, P, K, suhu, kelembapan, pH, curah hujan) yang akan digunakan untuk membuat prediksi, sementara target menyimpan kolom label (jenis tanaman) yang merupakan variabel yang ingin diprediksi."""

# Menginisialisasi daftar kosong untuk menambahkan semua nama model dan nama yang sesuai
acc = []
model = []

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(features,target,test_size = 0.2,random_state =2)

"""Melakukan pembagian data menjadi set pelatihan (x_train, y_train) dan set pengujian (x_test, y_test) menggunakan train_test_split dari scikit-learn. Sebanyak 20% data (test_size=0.2) dialokasikan untuk pengujian, sementara sisanya untuk pelatihan model, dengan random_state=2 untuk memastikan reproduktifitas pembagian.

## **4. Modeling**

Modeling adalah tahapan di mana algoritma Machine Learning dipilih dan dilatih menggunakan data pelatihan untuk mempelajari pola. Setelah pelatihan, model dievaluasi menggunakan data pengujian untuk mengukur kinerjanya dalam membuat prediksi baru.

### 4.1 Random Forest
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score

RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(x_train,y_train)

predicted_values = RF.predict(x_test)

x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('RF')
print("Random Forest Accuracy is: ", x)

print(classification_report(y_test,predicted_values))

score = cross_val_score(RF,features,target,cv=5)
print('Cross validation score: ',score)

"""### 4.2 Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
DT = DecisionTreeClassifier(criterion="entropy",random_state=2,max_depth=5)

DT.fit(x_train,y_train)

predicted_values = DT.predict(x_test)
x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('Decision Tree')
print("Decision Tree's Accuracy is: ", x*100)

print(classification_report(y_test,predicted_values, zero_division=0))

# Cross validation score (Logistic Regression)
score = cross_val_score(DT,features,target,cv=5)
score

"""### 4.3 KNN (K-Nearest Neighbor)"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()

knn.fit(x_train,y_train)

predicted_values = knn.predict(x_test)

x = metrics.accuracy_score(y_test, predicted_values)
acc.append(x)
model.append('K Nearest Neighbours')
print("KNN Accuracy is: ", x)

print(classification_report(y_test,predicted_values))

# Cross validation score (Logistic Regression)
score = cross_val_score(knn,features,target,cv=5)
score

"""## **5. Evaluasi Model**

### 5.1 Skor Model
"""

results = pd.DataFrame({'Model': model, 'Accuracy': acc})
print("--- Perbandingan Hasil Akurasi Model ---")
print(results.sort_values(by='Accuracy', ascending=False).to_markdown(index=False))

"""### 5.2 Visualisasi Perbandingan Skor Model"""

plt.figure(figsize=(14, 7), dpi=100, facecolor='white')
plt.title('Perbandingan Akurasi', fontsize=18, fontweight='bold')
plt.xlabel('Akurasi', fontsize=14)
plt.ylabel('Algoritma ML', fontsize=14)
sns.barplot(x=acc, y=model, palette='viridis')

# Menyimpan plot
plt.tight_layout()
plt.savefig('perbandingan_akurasi.png', dpi=300, bbox_inches='tight')
plt.show()

data = np.array([[104,18, 30, 23.603016, 60.3, 6.7, 140.91]])
prediction = RF.predict(data)
print(prediction)

"""Proses diatas melibatkan pengujian model yang sudah dilatih dengan data baru yang spesifik (misalnya, data kondisi tanah dan iklim tertentu) untuk mendapatkan rekomendasi tanaman dari model tersebut. Sebuah set data input baru (data) disiapkan, kemudian model RF (Random Forest) yang telah dilatih digunakan untuk memprediksi jenis tanaman berdasarkan data tersebut, dan hasilnya dicetak."""